/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenAirDrop, TokenAirDropInterface } from "../TokenAirDrop";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_airdropAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "remainingTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000be338038062000be38339818101604052810190620000379190620001a1565b620000576200004b620000a760201b60201c565b620000af60201b60201c565b8060038190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000268565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001848162000234565b92915050565b6000815190506200019b816200024e565b92915050565b60008060408385031215620001b557600080fd5b6000620001c58582860162000173565b9250506020620001d8858286016200018a565b9150509250929050565b6000620001ef826200020a565b9050919050565b60006200020382620001e2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200023f81620001f6565b81146200024b57600080fd5b50565b62000259816200022a565b81146200026557600080fd5b50565b61096b80620002786000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634e71d92d1461005c578063715018a6146100665780638da5cb5b14610070578063bf5839031461008e578063f2fde38b146100ac575b600080fd5b6100646100c8565b005b61006e610269565b005b6100786102f1565b60405161008591906106da565b60405180910390f35b61009661031a565b6040516100a391906107b5565b60405180910390f35b6100c660048036038101906100c191906105d8565b6103d5565b005b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90610775565b60405180910390fd5b60018060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6101f26102f1565b336003546040518463ffffffff1660e01b81526004016102149392919061071e565b602060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102669190610601565b50565b6102716104cd565b73ffffffffffffffffffffffffffffffffffffffff1661028f6102f1565b73ffffffffffffffffffffffffffffffffffffffff16146102e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dc90610795565b60405180910390fd5b6102ef60006104d5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e6103626102f1565b306040518363ffffffff1660e01b81526004016103809291906106f5565b60206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d0919061062a565b905090565b6103dd6104cd565b73ffffffffffffffffffffffffffffffffffffffff166103fb6102f1565b73ffffffffffffffffffffffffffffffffffffffff1614610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890610795565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890610755565b60405180910390fd5b6104ca816104d5565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506105a8816108f0565b92915050565b6000815190506105bd81610907565b92915050565b6000815190506105d28161091e565b92915050565b6000602082840312156105ea57600080fd5b60006105f884828501610599565b91505092915050565b60006020828403121561061357600080fd5b6000610621848285016105ae565b91505092915050565b60006020828403121561063c57600080fd5b600061064a848285016105c3565b91505092915050565b61065c816107e1565b82525050565b600061066f6026836107d0565b915061067a82610829565b604082019050919050565b60006106926024836107d0565b915061069d82610878565b604082019050919050565b60006106b56020836107d0565b91506106c0826108c7565b602082019050919050565b6106d48161081f565b82525050565b60006020820190506106ef6000830184610653565b92915050565b600060408201905061070a6000830185610653565b6107176020830184610653565b9392505050565b60006060820190506107336000830186610653565b6107406020830185610653565b61074d60408301846106cb565b949350505050565b6000602082019050818103600083015261076e81610662565b9050919050565b6000602082019050818103600083015261078e81610685565b9050919050565b600060208201905081810360008301526107ae816106a8565b9050919050565b60006020820190506107ca60008301846106cb565b92915050565b600082825260208201905092915050565b60006107ec826107ff565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f7520616c726561647920636c61696d65642074686520746f6b656e73206f60008201527f6e63652100000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6108f9816107e1565b811461090457600080fd5b50565b610910816107f3565b811461091b57600080fd5b50565b6109278161081f565b811461093257600080fd5b5056fea26469706673582212201eb29bd67479a286b4b793fc0a0af2bbc9b7adce66af270afccb24f3eb24136e64736f6c63430008030033";

type TokenAirDropConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenAirDropConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenAirDrop__factory extends ContractFactory {
  constructor(...args: TokenAirDropConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _token: string,
    _airdropAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenAirDrop> {
    return super.deploy(
      _token,
      _airdropAmount,
      overrides || {}
    ) as Promise<TokenAirDrop>;
  }
  getDeployTransaction(
    _token: string,
    _airdropAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _airdropAmount, overrides || {});
  }
  attach(address: string): TokenAirDrop {
    return super.attach(address) as TokenAirDrop;
  }
  connect(signer: Signer): TokenAirDrop__factory {
    return super.connect(signer) as TokenAirDrop__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenAirDropInterface {
    return new utils.Interface(_abi) as TokenAirDropInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenAirDrop {
    return new Contract(address, _abi, signerOrProvider) as TokenAirDrop;
  }
}
